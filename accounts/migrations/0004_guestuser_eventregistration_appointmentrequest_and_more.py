# Generated by Django 5.1.2 on 2025-10-15 00:42

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0003_remove_mfadevice_unique_user_device_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='GuestUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('district', models.CharField(blank=True, max_length=100, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('is_converted', models.BooleanField(default=False)),
                ('newsletter_subscription', models.BooleanField(default=False)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('converted_to_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='converted_from_guest', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Guest User',
                'verbose_name_plural': 'Guest Users',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(max_length=255)),
                ('event_date', models.DateField()),
                ('event_time', models.TimeField()),
                ('event_location', models.CharField(max_length=255)),
                ('event_type', models.CharField(choices=[('health_camp', 'Health Camp'), ('screening', 'Health Screening'), ('workshop', 'Workshop'), ('seminar', 'Seminar'), ('vaccination_drive', 'Vaccination Drive')], max_length=50)),
                ('participant_name', models.CharField(max_length=255)),
                ('participant_email', models.EmailField(max_length=254)),
                ('participant_phone', models.CharField(max_length=20)),
                ('participant_age', models.IntegerField(blank=True, null=True)),
                ('number_of_attendees', models.IntegerField(default=1)),
                ('special_requirements', models.TextField(blank=True)),
                ('dietary_restrictions', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('registered', 'Registered'), ('confirmed', 'Confirmed'), ('attended', 'Attended'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='registered', max_length=20)),
                ('registration_code', models.CharField(blank=True, max_length=50, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organized_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organized_events', to=settings.AUTH_USER_MODEL)),
                ('registrant_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations_as_user', to=settings.AUTH_USER_MODEL)),
                ('registrant_guest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to='accounts.guestuser')),
            ],
            options={
                'verbose_name': 'Event Registration',
                'verbose_name_plural': 'Event Registrations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AppointmentRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_type', models.CharField(choices=[('consultation', 'General Consultation'), ('follow_up', 'Follow-up'), ('emergency', 'Emergency'), ('specialist', 'Specialist Consultation'), ('lab_test', 'Lab Test'), ('imaging', 'Imaging/Radiology'), ('vaccination', 'Vaccination'), ('health_screening', 'Health Screening')], max_length=50)),
                ('preferred_date', models.DateField()),
                ('preferred_time', models.TimeField()),
                ('alternative_dates', models.JSONField(blank=True, default=list)),
                ('patient_name', models.CharField(max_length=255)),
                ('patient_age', models.IntegerField()),
                ('patient_gender', models.CharField(max_length=20)),
                ('patient_phone', models.CharField(max_length=20)),
                ('patient_email', models.EmailField(max_length=254)),
                ('reason_for_visit', models.TextField()),
                ('symptoms', models.TextField(blank=True)),
                ('medical_history', models.TextField(blank=True)),
                ('current_medications', models.TextField(blank=True)),
                ('allergies', models.TextField(blank=True)),
                ('has_insurance', models.BooleanField(default=False)),
                ('insurance_provider', models.CharField(blank=True, max_length=255)),
                ('insurance_number', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('rescheduled', 'Rescheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='pending', max_length=20)),
                ('confirmed_date', models.DateField(blank=True, null=True)),
                ('confirmed_time', models.TimeField(blank=True, null=True)),
                ('confirmation_code', models.CharField(blank=True, max_length=50, unique=True)),
                ('notes', models.TextField(blank=True)),
                ('admin_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('facility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointment_requests', to='accounts.facility')),
                ('preferred_professional', models.ForeignKey(blank=True, limit_choices_to={'platform': 'professionals'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointment_requests', to=settings.AUTH_USER_MODEL)),
                ('requester_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appointment_requests_as_user', to=settings.AUTH_USER_MODEL)),
                ('requester_guest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appointment_requests', to='accounts.guestuser')),
            ],
            options={
                'verbose_name': 'Appointment Request',
                'verbose_name_plural': 'Appointment Requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LocumRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facility_name', models.CharField(help_text='If facility not in system', max_length=255)),
                ('facility_address', models.TextField(blank=True)),
                ('position_title', models.CharField(max_length=255)),
                ('specialty_required', models.CharField(max_length=255)),
                ('department', models.CharField(blank=True, max_length=255)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('duration_days', models.IntegerField(editable=False)),
                ('shift_type', models.CharField(choices=[('day', 'Day Shift'), ('night', 'Night Shift'), ('rotating', 'Rotating'), ('on_call', 'On-Call')], default='day', max_length=50)),
                ('hours_per_week', models.DecimalField(decimal_places=2, max_digits=5)),
                ('minimum_experience_years', models.IntegerField(default=0)),
                ('license_requirements', models.TextField(blank=True)),
                ('certifications_required', models.JSONField(blank=True, default=list)),
                ('skills_required', models.JSONField(blank=True, default=list)),
                ('offered_rate', models.DecimalField(decimal_places=2, help_text='Rate per hour/day', max_digits=10)),
                ('rate_type', models.CharField(choices=[('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly')], default='daily', max_length=20)),
                ('accommodation_provided', models.BooleanField(default=False)),
                ('transportation_provided', models.BooleanField(default=False)),
                ('urgency', models.CharField(choices=[('low', 'Low - 2+ weeks'), ('medium', 'Medium - 1 week'), ('high', 'High - 1-3 days'), ('urgent', 'Urgent - Within 24 hours')], default='medium', max_length=20)),
                ('description', models.TextField()),
                ('special_requirements', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('reviewing', 'Under Review'), ('matched', 'Professional Matched'), ('accepted', 'Accepted by Professional'), ('confirmed', 'Confirmed'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('contact_person', models.CharField(max_length=255)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_phone', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('facility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='locum_requests', to='accounts.facility')),
                ('matched_professional', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matched_locum_requests', to=settings.AUTH_USER_MODEL)),
                ('requester_guest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='locum_requests', to='accounts.guestuser')),
                ('requester_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='locum_requests_as_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Locum Request',
                'verbose_name_plural': 'Locum Requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PrescriptionRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prescription_image', models.ImageField(blank=True, null=True, upload_to='prescriptions/')),
                ('prescription_number', models.CharField(blank=True, max_length=100, unique=True)),
                ('medication_name', models.CharField(max_length=255)),
                ('dosage', models.CharField(max_length=100)),
                ('quantity', models.IntegerField()),
                ('refills', models.IntegerField(default=0)),
                ('prescribing_doctor', models.CharField(blank=True, max_length=255)),
                ('diagnosis', models.CharField(blank=True, max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('delivery_required', models.BooleanField(default=False)),
                ('delivery_address', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('dispensed', 'Dispensed'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_prescriptions', to=settings.AUTH_USER_MODEL)),
                ('preferred_pharmacy', models.ForeignKey(blank=True, limit_choices_to={'platform': 'pharmacies'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prescription_requests', to=settings.AUTH_USER_MODEL)),
                ('requester_guest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prescription_requests', to='accounts.guestuser')),
                ('requester_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prescription_requests_as_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Prescription Request',
                'verbose_name_plural': 'Prescription Requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='guestuser',
            index=models.Index(fields=['email'], name='accounts_gu_email_40506c_idx'),
        ),
        migrations.AddIndex(
            model_name='guestuser',
            index=models.Index(fields=['phone_number'], name='accounts_gu_phone_n_d7cd00_idx'),
        ),
        migrations.AddIndex(
            model_name='guestuser',
            index=models.Index(fields=['created_at'], name='accounts_gu_created_e0bc6b_idx'),
        ),
        migrations.AddIndex(
            model_name='eventregistration',
            index=models.Index(fields=['status', 'event_date'], name='accounts_ev_status_c668e2_idx'),
        ),
        migrations.AddIndex(
            model_name='eventregistration',
            index=models.Index(fields=['registration_code'], name='accounts_ev_registr_7a5c12_idx'),
        ),
        migrations.AddIndex(
            model_name='appointmentrequest',
            index=models.Index(fields=['status', 'preferred_date'], name='accounts_ap_status_5ee606_idx'),
        ),
        migrations.AddIndex(
            model_name='appointmentrequest',
            index=models.Index(fields=['confirmation_code'], name='accounts_ap_confirm_291af4_idx'),
        ),
        migrations.AddIndex(
            model_name='appointmentrequest',
            index=models.Index(fields=['created_at'], name='accounts_ap_created_af4107_idx'),
        ),
        migrations.AddIndex(
            model_name='locumrequest',
            index=models.Index(fields=['status', 'created_at'], name='accounts_lo_status_37b0a3_idx'),
        ),
        migrations.AddIndex(
            model_name='locumrequest',
            index=models.Index(fields=['start_date', 'end_date'], name='accounts_lo_start_d_148588_idx'),
        ),
        migrations.AddIndex(
            model_name='locumrequest',
            index=models.Index(fields=['specialty_required'], name='accounts_lo_special_d64ed1_idx'),
        ),
        migrations.AddIndex(
            model_name='locumrequest',
            index=models.Index(fields=['urgency'], name='accounts_lo_urgency_f63c4f_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionrequest',
            index=models.Index(fields=['status', 'created_at'], name='accounts_pr_status_a15e3e_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionrequest',
            index=models.Index(fields=['prescription_number'], name='accounts_pr_prescri_da8b06_idx'),
        ),
    ]
