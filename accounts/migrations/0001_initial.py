# Generated by Django 5.1.2 on 2025-10-25 23:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('is_verified', models.BooleanField(default=False)),
                ('mfa_enabled', models.BooleanField(default=False)),
                ('mfa_method', models.CharField(choices=[('sms', 'SMS'), ('email', 'Email'), ('totp', 'TOTP'), ('disabled', 'Disabled')], default='disabled', max_length=20)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('login_attempts', models.IntegerField(default=0)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('id_type', models.CharField(blank=True, choices=[('ghana_card', 'Ghana Card'), ('passport', 'Passport')], max_length=20, null=True)),
                ('id_number', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuthenticationAudit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('register', 'Registration'), ('password_reset', 'Password Reset'), ('email_verification', 'Email Verification'), ('mfa_setup', 'MFA Setup'), ('mfa_challenge', 'MFA Challenge'), ('account_locked', 'Account Locked'), ('account_unlocked', 'Account Unlocked'), ('profile_update', 'Profile Update'), ('role_assignment', 'Role Assignment'), ('permission_granted', 'Permission Granted'), ('permission_denied', 'Permission Denied'), ('data_access', 'Data Access'), ('data_modification', 'Data Modification')], max_length=50)),
                ('platform', models.CharField(blank=True, choices=[('communities', 'Communities'), ('facilities', 'Health Facilities'), ('professionals', 'Individual Professionals'), ('partners', 'Partners'), ('pharmacies', 'Pharmacies'), ('patients', 'Patients/Users')], max_length=20, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('success', models.BooleanField()),
                ('details', models.JSONField(blank=True, default=dict)),
                ('resource_accessed', models.CharField(blank=True, max_length=200, null=True)),
                ('method', models.CharField(blank=True, max_length=10, null=True)),
                ('endpoint', models.CharField(blank=True, max_length=500, null=True)),
                ('response_code', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auth_audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Authentication Audit',
                'verbose_name_plural': 'Authentication Audits',
                'db_table': 'authentication_audit',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='DataAccessLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_type', models.CharField(choices=[('patient_data', 'Patient Data'), ('medical_records', 'Medical Records'), ('prescription_data', 'Prescription Data'), ('financial_data', 'Financial Data'), ('personal_info', 'Personal Information'), ('system_data', 'System Data')], max_length=50)),
                ('access_type', models.CharField(choices=[('view', 'View'), ('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('export', 'Export'), ('print', 'Print')], max_length=20)),
                ('resource_id', models.CharField(blank=True, max_length=100, null=True)),
                ('resource_name', models.CharField(blank=True, max_length=200, null=True)),
                ('platform', models.CharField(choices=[('communities', 'Communities'), ('facilities', 'Health Facilities'), ('professionals', 'Individual Professionals'), ('partners', 'Partners'), ('pharmacies', 'Pharmacies'), ('patients', 'Patients/Users')], max_length=20)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('access_reason', models.CharField(blank=True, max_length=200, null=True)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_access_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Data Access Log',
                'verbose_name_plural': 'Data Access Logs',
                'db_table': 'data_access_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='LoginSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_token', models.CharField(max_length=255, unique=True)),
                ('refresh_token', models.CharField(blank=True, max_length=255, null=True)),
                ('device_info', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField()),
                ('location', models.JSONField(blank=True, default=dict)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='login_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Login Session',
                'verbose_name_plural': 'Login Sessions',
                'db_table': 'login_sessions',
            },
        ),
        migrations.CreateModel(
            name='MFADevice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('device_type', models.CharField(choices=[('sms', 'SMS'), ('email', 'Email'), ('totp', 'TOTP'), ('backup_codes', 'Backup Codes')], max_length=20)),
                ('device_id', models.CharField(max_length=100)),
                ('device_name', models.CharField(blank=True, max_length=100, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_primary', models.BooleanField(default=False)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mfa_devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'MFA Device',
                'verbose_name_plural': 'MFA Devices',
                'db_table': 'mfa_devices',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('platform', models.CharField(choices=[('communities', 'Communities'), ('facilities', 'Health Facilities'), ('professionals', 'Individual Professionals'), ('partners', 'Partners'), ('pharmacies', 'Pharmacies'), ('patients', 'Patients/Users')], max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('permissions', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'db_table': 'roles',
                'unique_together': {('name', 'platform')},
            },
        ),
        migrations.CreateModel(
            name='SecurityEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('login_success', 'Successful Login'), ('login_failed', 'Failed Login'), ('mfa_challenge', 'MFA Challenge'), ('mfa_success', 'MFA Success'), ('mfa_failed', 'MFA Failed'), ('password_change', 'Password Change'), ('account_locked', 'Account Locked'), ('account_unlocked', 'Account Unlocked'), ('suspicious_activity', 'Suspicious Activity'), ('permission_denied', 'Permission Denied'), ('data_access', 'Data Access'), ('api_access', 'API Access')], max_length=50)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('platform', models.CharField(blank=True, choices=[('communities', 'Communities'), ('facilities', 'Health Facilities'), ('professionals', 'Individual Professionals'), ('partners', 'Partners'), ('pharmacies', 'Pharmacies'), ('patients', 'Patients/Users')], max_length=20, null=True)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_events', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='security_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Security Event',
                'verbose_name_plural': 'Security Events',
                'db_table': 'security_events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('platform', models.CharField(choices=[('communities', 'Communities'), ('facilities', 'Health Facilities'), ('professionals', 'Individual Professionals'), ('partners', 'Partners'), ('pharmacies', 'Pharmacies'), ('patients', 'Patients/Users')], max_length=20)),
                ('bio', models.TextField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('profile_data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Role',
                'verbose_name_plural': 'User Roles',
                'db_table': 'user_roles',
            },
        ),
    ]
