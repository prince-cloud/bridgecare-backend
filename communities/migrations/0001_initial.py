# Generated by Django 5.1.2 on 2025-10-15 02:55

import django.db.models.deletion
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('facilities', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CommunityProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('organization_name', models.CharField(blank=True, max_length=200, null=True)),
                ('organization_type', models.CharField(blank=True, max_length=100, null=True)),
                ('volunteer_status', models.BooleanField(default=False)),
                ('coordinator_level', models.CharField(blank=True, max_length=50, null=True)),
                ('areas_of_focus', models.JSONField(blank=True, default=list)),
                ('organization_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('organization_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('organization_address', models.TextField(blank=True, null=True)),
                ('active_programs', models.JSONField(blank=True, default=list)),
                ('certifications', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='community_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Community Profile',
                'verbose_name_plural': 'Community Profiles',
                'db_table': 'community_profiles',
            },
        ),
        migrations.CreateModel(
            name='HealthProgram',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('program_name', models.CharField(max_length=255)),
                ('program_type', models.CharField(choices=[('screening', 'Health Screening'), ('vaccination', 'Vaccination Drive'), ('maternal_child', 'Maternal/Child Health'), ('telehealth', 'Group Telehealth'), ('health_education', 'Health Education Campaign'), ('other', 'Other')], max_length=50)),
                ('program_type_custom', models.CharField(blank=True, help_text="If 'Other' is selected", max_length=100)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location_name', models.CharField(max_length=255)),
                ('district', models.CharField(max_length=100)),
                ('region', models.CharField(max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('location_details', models.TextField(blank=True)),
                ('target_participants', models.IntegerField(help_text='Estimated number of participants')),
                ('actual_participants', models.IntegerField(default=0, help_text='Actual number reached')),
                ('interventions_planned', models.JSONField(blank=True, default=list, help_text='List of planned interventions (vitals, tests, vaccines, etc.)')),
                ('lead_organizer', models.CharField(max_length=255)),
                ('lead_organizer_contact', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('partner_organizations', models.JSONField(blank=True, default=list, help_text='List of partner organization names')),
                ('funding_source', models.CharField(blank=True, max_length=255)),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('approved', 'Approved'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planning', max_length=20)),
                ('is_synced', models.BooleanField(default=True)),
                ('offline_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('locum_needs', models.JSONField(blank=True, default=list, help_text='List of required roles: {role, quantity, duration}')),
                ('equipment_needs', models.TextField(blank=True)),
                ('equipment_list', models.JSONField(blank=True, default=list)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programs_created', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, help_text='Community organization managing this program', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='health_programs', to='communities.communityprofile')),
                ('team_members', models.ManyToManyField(blank=True, related_name='programs_collaborated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Health Program',
                'verbose_name_plural': 'Health Programs',
                'db_table': 'community_health_programs',
                'ordering': ['-start_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BulkInterventionUpload',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file', models.FileField(upload_to='bulk_uploads/interventions/')),
                ('file_name', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('partial', 'Partially Completed')], default='pending', max_length=20)),
                ('total_rows', models.IntegerField(default=0)),
                ('processed_rows', models.IntegerField(default=0)),
                ('successful_rows', models.IntegerField(default=0)),
                ('failed_rows', models.IntegerField(default=0)),
                ('errors', models.JSONField(blank=True, default=list)),
                ('processing_log', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bulk_uploads', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bulk_uploads', to='communities.healthprogram')),
            ],
            options={
                'verbose_name': 'Bulk Intervention Upload',
                'verbose_name_plural': 'Bulk Intervention Uploads',
                'db_table': 'bulk_intervention_uploads',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='HealthSurvey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('survey_type', models.CharField(choices=[('needs_assessment', 'Health Needs Assessment'), ('impact_evaluation', 'Program Impact Evaluation'), ('satisfaction', 'Satisfaction Survey'), ('awareness', 'Health Awareness Survey'), ('screening', 'Pre-Screening Survey'), ('custom', 'Custom Survey')], max_length=50)),
                ('questions', models.JSONField(default=list, help_text='List of questions with type, options, validation')),
                ('target_audience', models.CharField(blank=True, max_length=255)),
                ('target_count', models.IntegerField(default=0, help_text='Expected number of responses')),
                ('actual_responses', models.IntegerField(default=0)),
                ('is_anonymous', models.BooleanField(default=True)),
                ('allow_multiple_responses', models.BooleanField(default=False)),
                ('requires_authentication', models.BooleanField(default=False)),
                ('primary_language', models.CharField(default='en', max_length=10)),
                ('available_languages', models.JSONField(default=list, help_text='List of language codes')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('closed', 'Closed'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('supports_offline', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='surveys_created', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='surveys', to='communities.healthprogram')),
            ],
            options={
                'verbose_name': 'Health Survey',
                'verbose_name_plural': 'Health Surveys',
                'db_table': 'health_surveys',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BulkSurveyUpload',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file', models.FileField(upload_to='bulk_uploads/surveys/')),
                ('file_name', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('partial', 'Partially Completed')], default='pending', max_length=20)),
                ('total_rows', models.IntegerField(default=0)),
                ('processed_rows', models.IntegerField(default=0)),
                ('successful_rows', models.IntegerField(default=0)),
                ('failed_rows', models.IntegerField(default=0)),
                ('errors', models.JSONField(blank=True, default=list)),
                ('processing_log', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='survey_bulk_uploads', to=settings.AUTH_USER_MODEL)),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bulk_uploads', to='communities.healthsurvey')),
            ],
            options={
                'verbose_name': 'Bulk Survey Upload',
                'verbose_name_plural': 'Bulk Survey Uploads',
                'db_table': 'bulk_survey_uploads',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='ProgramIntervention',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('intervention_type', models.CharField(choices=[('vitals', 'Vitals Collection'), ('diagnostic', 'Diagnostic Test'), ('vaccination', 'Vaccination'), ('telehealth', 'Telehealth Session'), ('health_tips', 'Health Tips Distribution'), ('referral', 'Referral'), ('other', 'Other')], max_length=50)),
                ('intervention_name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('participant_id', models.CharField(blank=True, help_text='Links to EHR if available', max_length=100)),
                ('participant_name', models.CharField(blank=True, max_length=255)),
                ('participant_age', models.IntegerField(blank=True, null=True)),
                ('participant_gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=20)),
                ('participant_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('blood_pressure', models.CharField(blank=True, help_text='Format: 120/80', max_length=20)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='In Celsius', max_digits=4, null=True)),
                ('pulse', models.IntegerField(blank=True, help_text='Beats per minute', null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='In kg', max_digits=5, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='In cm', max_digits=5, null=True)),
                ('test_results', models.JSONField(blank=True, default=dict, help_text='Test name and results (e.g., Malaria RDT: Positive)')),
                ('vaccine_administered', models.CharField(blank=True, max_length=200)),
                ('vaccine_dose_number', models.IntegerField(blank=True, null=True)),
                ('vaccine_batch_number', models.CharField(blank=True, max_length=100)),
                ('vaccination_date', models.DateField(blank=True, null=True)),
                ('symptoms', models.JSONField(blank=True, default=list)),
                ('diagnosis', models.TextField(blank=True)),
                ('treatment_given', models.TextField(blank=True)),
                ('referral_needed', models.BooleanField(default=False)),
                ('referral_notes', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('documented_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('synced_to_ehr', models.BooleanField(default=False)),
                ('ehr_record_id', models.CharField(blank=True, max_length=100)),
                ('offline_id', models.CharField(blank=True, max_length=100, null=True)),
                ('documented_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='interventions_documented', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interventions', to='communities.healthprogram')),
                ('referral_facility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='facilities.facility')),
            ],
            options={
                'verbose_name': 'Program Intervention',
                'verbose_name_plural': 'Program Interventions',
                'db_table': 'program_interventions',
                'ordering': ['-documented_at'],
            },
        ),
        migrations.CreateModel(
            name='ProgramReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_type', models.CharField(choices=[('impact', 'Impact Report'), ('financial', 'Financial Report'), ('attendance', 'Attendance Report'), ('health_outcomes', 'Health Outcomes Report'), ('custom', 'Custom Report')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('report_data', models.JSONField(default=dict, help_text='Aggregated statistics and metrics')),
                ('charts', models.JSONField(blank=True, default=list, help_text='Chart configurations')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('report_file', models.FileField(blank=True, null=True, upload_to='reports/programs/')),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_generated', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='communities.healthprogram')),
            ],
            options={
                'verbose_name': 'Program Report',
                'verbose_name_plural': 'Program Reports',
                'db_table': 'program_reports',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='SurveyResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('respondent_name', models.CharField(blank=True, max_length=255)),
                ('respondent_age', models.IntegerField(blank=True, null=True)),
                ('respondent_gender', models.CharField(blank=True, max_length=20)),
                ('respondent_location', models.CharField(blank=True, max_length=255)),
                ('answers', models.JSONField(help_text='Question ID: Answer mapping')),
                ('language_used', models.CharField(default='en', max_length=10)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('offline_id', models.CharField(blank=True, max_length=100, null=True)),
                ('synced_at', models.DateTimeField(blank=True, null=True)),
                ('respondent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='survey_responses', to=settings.AUTH_USER_MODEL)),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='communities.healthsurvey')),
            ],
            options={
                'verbose_name': 'Survey Response',
                'verbose_name_plural': 'Survey Responses',
                'db_table': 'survey_responses',
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.AddIndex(
            model_name='healthprogram',
            index=models.Index(fields=['status', 'start_date'], name='community_h_status_2460f2_idx'),
        ),
        migrations.AddIndex(
            model_name='healthprogram',
            index=models.Index(fields=['program_type'], name='community_h_program_5bbfb3_idx'),
        ),
        migrations.AddIndex(
            model_name='healthprogram',
            index=models.Index(fields=['district', 'region'], name='community_h_distric_af3eb5_idx'),
        ),
        migrations.AddIndex(
            model_name='healthprogram',
            index=models.Index(fields=['organization'], name='community_h_organiz_228c98_idx'),
        ),
        migrations.AddIndex(
            model_name='healthprogram',
            index=models.Index(fields=['created_by'], name='community_h_created_1dce50_idx'),
        ),
        migrations.AddIndex(
            model_name='healthsurvey',
            index=models.Index(fields=['status', 'start_date'], name='health_surv_status_b17b7b_idx'),
        ),
        migrations.AddIndex(
            model_name='healthsurvey',
            index=models.Index(fields=['survey_type'], name='health_surv_survey__6bcabf_idx'),
        ),
        migrations.AddIndex(
            model_name='programintervention',
            index=models.Index(fields=['program', 'documented_at'], name='program_int_program_7ae694_idx'),
        ),
        migrations.AddIndex(
            model_name='programintervention',
            index=models.Index(fields=['participant_id'], name='program_int_partici_d61c3d_idx'),
        ),
        migrations.AddIndex(
            model_name='programintervention',
            index=models.Index(fields=['intervention_type'], name='program_int_interve_5e5c70_idx'),
        ),
        migrations.AddIndex(
            model_name='surveyresponse',
            index=models.Index(fields=['survey', 'submitted_at'], name='survey_resp_survey__ead8c2_idx'),
        ),
    ]
